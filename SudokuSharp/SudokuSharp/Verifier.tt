<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>
using System;

namespace SudokuSharp
{
    internal static class Verifier
    {
        public static Solver.Result Verify(Cell[] cells)
        {
			Solver.Result result = Solver.Result.Success;
			for (int major = 0; major < 9; major++)
			{
				int valMask;
<#
	string[] iterators = new[] { "Rows", "Cols", "BoxRows" };
	foreach (string iterator in iterators) {
#>
				// <#= iterator #>
				valMask = 0;
				for (int minor = 0; minor < 9; minor++)
				{
					Cell cell = cells[Solver.<#= iterator #>Index(major, minor)];
					if (cell.Value == Cell.Unknown)
					{
						if (cell.Possible == 0) // no remaining possibilities
							return Solver.Result.Invalid;
						result = Solver.Result.Incomplete;
					}
					else
					{
						// check if all 9 values are present
						int valBit = 1 << cell.Value;
						// duplicate value if valBit already added
						if ((valMask & valBit) != 0)
							return Solver.Result.Invalid;
						valMask |= valBit;
					}
				}
<#
	}
#>
			}
			return result;
		}
    }
}